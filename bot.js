const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 10000;

// Ortam deƒüi≈ükenleri ve API URL'leri
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
const IKAS_API_TOKEN_URL = `https://adadunyaoptik.myikas.com/api/admin/oauth/token`;
const IKAS_API_GRAPHQL_URL = 'https://api.myikas.com/api/v1/admin/graphql';
const IKAS_CLIENT_ID = process.env.IKAS_CLIENT_ID;
const IKAS_CLIENT_SECRET = process.env.IKAS_CLIENT_SECRET;

// Body-parser ayarlarƒ±
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Global kullanƒ±cƒ± durumlarƒ±nƒ± tutan obje
const userStates = {};

// Webhook GET: Doƒürulama
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode && token === VERIFY_TOKEN) {
    console.log("‚úÖ Webhook doƒürulandƒ±!");
    res.status(200).send(challenge);
  } else {
    console.error("‚ùå Webhook doƒürulamasƒ± ba≈üarƒ±sƒ±z.");
    res.sendStatus(403);
  }
});

// Webhook POST: Gelen mesajlarƒ±n i≈ülenmesi
app.post('/webhook', async (req, res) => {
  try {
    const entry = req.body.entry && req.body.entry[0];
    const change = entry && entry.changes && entry.changes[0];
    const messageData = change && change.value && change.value.messages && change.value.messages[0];

    if (messageData && messageData.from) {
      const from = messageData.from;
      // Mesaj metnini k√º√ß√ºk harfe √ßeviriyoruz.
      const messageText = messageData.text ? messageData.text.body.toLowerCase() : "";
      console.log(`üì© Yeni mesaj alƒ±ndƒ±: "${messageText}" (G√∂nderen: ${from})`);

      // Eƒüer kullanƒ±cƒ± ilk mesajƒ±nƒ± g√∂nderiyorsa ana men√ºy√º g√∂ster.
      if (!userStates[from]) {
        sendWhatsAppInteractiveMessage(from);
        userStates[from] = true;
      } else {
        // Gelen mesaj ID'sine g√∂re ilgili fonksiyonlar √ßaƒürƒ±lƒ±yor.
        if (messageText.startsWith("order_detail_")) {
          // "Bu Sipari≈üi ƒ∞ncele" butonuna basƒ±ldƒ±
          const orderNumber = messageText.replace("order_detail_", "");
          sendOrderDetailInteractiveMenu(from, orderNumber);
        } else if (messageText.startsWith("kargo_takip_")) {
          // "Kargo takip no" butonuna basƒ±ldƒ±
          const orderNumber = messageText.replace("kargo_takip_", "");
          sendTrackingInfoMessage(from, orderNumber);
        } else if (messageText.startsWith("siparis_durumu_")) {
          // "Sipari≈ü durumu" butonuna basƒ±ldƒ±
          const orderNumber = messageText.replace("siparis_durumu_", "");
          sendOrderStatusMessage(from, orderNumber);
        } else if (
          messageText.startsWith("iade_") &&
          !messageText.startsWith("iade_onay_") &&
          !messageText.startsWith("iade_vazgec_") &&
          !messageText.startsWith("musteri_temsilci_")
        ) {
          // ƒ∞lk "ƒ∞ade" butonuna basƒ±ldƒ±
          const orderNumber = messageText.replace("iade_", "");
          sendReturnConfirmationMessage(from, orderNumber);
        } else if (messageText.startsWith("iade_onay_")) {
          // "Onaylƒ±yorum" butonuna basƒ±ldƒ±: iade talebi ba≈ülatƒ±lƒ±yor
          const orderNumber = messageText.replace("iade_onay_", "");
          initiateReturnRequest(from, orderNumber);
        } else if (messageText.startsWith("iade_vazgec_")) {
          // "Vazge√ß" butonuna basƒ±ldƒ±: ana men√º yeniden g√∂steriliyor
          sendWhatsAppInteractiveMessage(from);
        } else if (messageText.startsWith("musteri_temsilci_")) {
          // "Ba≈üka bir sorum var" butonuna basƒ±ldƒ±: m√º≈üteri temsilcisine y√∂nlendiriliyor
          sendCustomerServiceMessage(from);
        } else if (messageText === "siparisim") {
          // "Sipari≈ülerim" butonuna basƒ±ldƒ±
          const orders = await getOrdersByPhone(from);
          if (typeof orders === 'string') {
            sendWhatsAppMessage(from, orders);
          } else {
            orders.forEach(order => {
              sendOrderInteractiveMessage(from, order);
            });
          }
        } else if (messageText === "siparisim_nerede") {
          sendWhatsAppMessage(from, "Sipari≈üinizin nerede olduƒüunu g√∂steren detaylƒ± bilgi burada olacak.");
        } else if (messageText === "iade_iptal") {
          sendWhatsAppMessage(from, "ƒ∞ade ve iptal i≈ülemleriyle ilgili bilgi burada olacak.");
        } else {
          sendWhatsAppMessage(from, "L√ºtfen men√ºdeki butonlardan birini se√ßiniz.");
        }
      }
    }

    res.sendStatus(200);
  } catch (error) {
    console.error("‚ùå Webhook i≈üleme hatasƒ±:", error);
    res.sendStatus(500);
  }
});

// Ana men√º: Butonlu mesaj g√∂nderme
async function sendWhatsAppInteractiveMessage(to) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;

  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: "Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim?" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "siparisim", title: "üì¶ Sipari≈ülerim" } },
          { type: "reply", reply: { id: "siparisim_nerede", title: "üöö Sipari≈üim Nerede?" } },
          { type: "reply", reply: { id: "iade_iptal", title: "üîÑ ƒ∞ade ve ƒ∞ptal" } }
        ]
      }
    }
  };

  try {
    const response = await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    console.log("‚úÖ Butonlu mesaj g√∂nderildi:", response.data);
  } catch (error) {
    console.error("‚ùå Butonlu mesaj g√∂nderme hatasƒ±:", error.response ? error.response.data : error.message);
  }
}

// ƒ∞KAS API √ºzerinden Access Token alma
async function getAccessToken() {
  try {
    const response = await axios.post(IKAS_API_TOKEN_URL,
      `grant_type=client_credentials&client_id=${IKAS_CLIENT_ID}&client_secret=${IKAS_CLIENT_SECRET}`,
      { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
    );
    console.log("‚úÖ Access Token alƒ±ndƒ±:", response.data.access_token);
    return response.data.access_token;
  } catch (error) {
    console.error("‚ùå Access Token alma hatasƒ±:", error.response ? error.response.data : error.message);
    return null;
  }
}

// Telefon numarasƒ±na g√∂re sipari≈üleri getiren GraphQL sorgusu
async function getOrdersByPhone(phone) {
  const token = await getAccessToken();
  if (!token) {
    return "‚ö†Ô∏è Sipari≈ü bilgilerinize ula≈üƒ±lamƒ±yor.";
  }

  const normalizedPhone = "+90" + phone.replace(/\D/g, "").slice(-10);

  const query = {
    query: `
    query {
      listOrder {
        data {
          orderNumber
          status
          totalFinalPrice
          currencyCode
          createdAt
          items {
            price
            product {
              name
              imageUrl
            }
          }
          customer {
            phone
          }
        }
      }
    }`
  };

  try {
    const response = await axios.post(IKAS_API_GRAPHQL_URL, query, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const orders = response.data.data.listOrder.data;
    const userOrders = orders.filter(order => order.customer && order.customer.phone === normalizedPhone);

    if (userOrders.length === 0) {
      return "Telefon numaranƒ±za ait sipari≈ü bulunmamaktadƒ±r.";
    }

    return userOrders;
  } catch (error) {
    console.error("‚ùå ƒ∞KAS API hata:", error.response ? error.response.data : error.message);
    return "‚ö†Ô∏è Sipari≈ü bilgilerinize ula≈üƒ±rken hata olu≈ütu.";
  }
}

// Her sipari≈ü i√ßin interaktif mesaj g√∂nderimi
async function sendOrderInteractiveMessage(to, order) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;

  const orderDate = order.createdAt ? new Date(order.createdAt).toLocaleDateString() : "Bilinmiyor";
  const status = order.status || "Bilinmiyor";
  const product = order.items && order.items[0] ? order.items[0].product : null;
  const productName = product ? product.name : "√úr√ºn bilgisi yok";
  const productPrice = order.items && order.items[0] ? order.items[0].price : order.totalFinalPrice;
  const currency = order.currencyCode || "";
  const imageUrl = product && product.imageUrl ? product.imageUrl : "";

  const bodyText = `Sipari≈ü No: ${order.orderNumber}\nSipari≈ü Tarihi: ${orderDate}\nDurumu: ${status}\n√úr√ºn: ${productName}\nFiyat: ${productPrice} ${currency}`;

  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      header: {
        type: "image",
        image: {
          link: imageUrl
        }
      },
      body: {
        text: bodyText
      },
      action: {
        buttons: [
          {
            type: "reply",
            reply: {
              id: `order_detail_${order.orderNumber}`,
              title: "Bu Sipari≈üi ƒ∞ncele"
            }
          }
        ]
      }
    }
  };

  try {
    const response = await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    console.log(`‚úÖ Sipari≈ü ${order.orderNumber} i√ßin interaktif mesaj g√∂nderildi:`, response.data);
  } catch (error) {
    console.error(`‚ùå Sipari≈ü ${order.orderNumber} i√ßin interaktif mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
  }
}

// Sipari≈ü detay men√ºs√º: "Bu sipari≈üi hakkƒ±nda ne yapmak istiyorsun?"
async function sendOrderDetailInteractiveMenu(to, orderNumber) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: {
        text: "Bu sipari≈üi hakkƒ±nda ne yapmak istiyorsun?"
      },
      action: {
        buttons: [
          {
            type: "reply",
            reply: {
              id: `kargo_takip_${orderNumber}`,
              title: "Kargo takip no"
            }
          },
          {
            type: "reply",
            reply: {
              id: `siparis_durumu_${orderNumber}`,
              title: "Sipari≈ü durumu"
            }
          },
          {
            type: "reply",
            reply: {
              id: `iade_${orderNumber}`,
              title: "ƒ∞ade"
            }
          }
        ]
      }
    }
  };

  try {
    const response = await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    console.log(`‚úÖ Sipari≈ü ${orderNumber} detay interaktif mesaj g√∂nderildi:`, response.data);
  } catch (error) {
    console.error(`‚ùå Sipari≈ü ${orderNumber} detay interaktif mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
  }
}

// Kargo takip no: ilgili sipari≈üin kargo takip bilgisini g√∂sterir
async function sendTrackingInfoMessage(to, orderNumber) {
  const trackingInfo = await getTrackingInfo(orderNumber);
  const baseMessage = `Sipari≈ü ${orderNumber} nolu takip kodun √ºzerinden takip edebilirsin: ${trackingInfo.trackingCode}`;
  
  if (trackingInfo.delivered && trackingInfo.trackingUrl) {
    const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
    const data = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to: to,
      type: "interactive",
      interactive: {
        type: "button",
        body: {
          text: baseMessage
        },
        action: {
          buttons: [
            {
              type: "url",
              url: {
                title: "Takip Et",
                url: trackingInfo.trackingUrl
              }
            }
          ]
        }
      }
    };

    try {
      const response = await axios.post(url, data, {
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          "Content-Type": "application/json"
        }
      });
      console.log(`‚úÖ Sipari≈ü ${orderNumber} kargo takip kodu mesajƒ± g√∂nderildi:`, response.data);
    } catch (error) {
      console.error(`‚ùå Sipari≈ü ${orderNumber} kargo takip kodu mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
    }
  } else {
    sendWhatsAppMessage(to, baseMessage);
  }
}

// Sipari≈ü durumu: "kargoda" olduƒüuna dair bilgi ve takip butonu
async function sendOrderStatusMessage(to, orderNumber) {
  const trackingInfo = await getTrackingInfo(orderNumber);
  const baseMessage = `Sipari≈ü ${orderNumber} nolu √ºr√ºn√ºn "kargoda" g√∂r√ºnmektedir.\nDilersen a≈üaƒüƒ±daki kargo takip no √ºzerinden takip edebilirsin.\nKargo firmasƒ±: ${trackingInfo.carrierName}, takip no: ${trackingInfo.trackingCode}`;
  
  if (trackingInfo.delivered && trackingInfo.trackingUrl) {
    const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
    const data = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to: to,
      type: "interactive",
      interactive: {
        type: "button",
        body: {
          text: baseMessage
        },
        action: {
          buttons: [
            {
              type: "url",
              url: {
                title: "Takip Et",
                url: trackingInfo.trackingUrl
              }
            }
          ]
        }
      }
    };

    try {
      const response = await axios.post(url, data, {
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          "Content-Type": "application/json"
        }
      });
      console.log(`‚úÖ Sipari≈ü ${orderNumber} durum bilgisi mesajƒ± g√∂nderildi:`, response.data);
    } catch (error) {
      console.error(`‚ùå Sipari≈ü ${orderNumber} durum bilgisi mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
    }
  } else {
    sendWhatsAppMessage(to, baseMessage);
  }
}

// ƒ∞ade: Eƒüer sipari≈ü "teslim edildi" ise onay mesajƒ± g√∂nder, aksi halde uyarƒ± g√∂ster.
async function sendReturnConfirmationMessage(to, orderNumber) {
  const orderDetails = await getTrackingInfo(orderNumber);
  if (orderDetails.status !== "teslim edildi") {
    sendWhatsAppMessage(
      to, 
      `Not: Sipari≈ü ${orderNumber} nolu √ºr√ºn√ºn "${orderDetails.status}" a≈üamasƒ±nda olduƒüu i√ßin iade ba≈ülatamƒ±yoruz. Teslim edildikten 14 g√ºn i√ßerisinde iade talebini ba≈ülatabilirsin.`
    );
    return;
  }

  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: {
        text: `Sipari≈ü ${orderNumber} nolu √ºr√ºn√ºn iade talebi olu≈üturduƒüuna emin misin?`
      },
      action: {
        buttons: [
          {
            type: "reply",
            reply: {
              id: `iade_onay_${orderNumber}`,
              title: "Onaylƒ±yorum"
            }
          },
          {
            type: "reply",
            reply: {
              id: `iade_vazgec_${orderNumber}`,
              title: "Vazge√ß"
            }
          },
          {
            type: "reply",
            reply: {
              id: `musteri_temsilci_${orderNumber}`,
              title: "Ba≈üka bir sorum var"
            }
          }
        ]
      }
    }
  };

  try {
    const response = await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    console.log(`‚úÖ ƒ∞ade onay mesajƒ± g√∂nderildi for order ${orderNumber}:`, response.data);
  } catch (error) {
    console.error(`‚ùå ƒ∞ade onay mesajƒ± g√∂nderme hatasƒ± for order ${orderNumber}:`, error.response ? error.response.data : error.message);
  }
}

// ƒ∞ade Onay: API √ºzerinden iade talebi ba≈ülatƒ±lƒ±yor (sim√ºlasyon)
async function initiateReturnRequest(to, orderNumber) {
  console.log(`API √ºzerinden iade talebi ba≈ülatƒ±lƒ±yor: Order ${orderNumber}`);
  sendWhatsAppMessage(to, `Sipari≈ü ${orderNumber} nolu √ºr√ºn i√ßin iade talebiniz olu≈üturulmu≈ütur.`);
}

// M√º≈üteri temsilcisine baƒülanma mesajƒ±
function sendCustomerServiceMessage(to) {
  sendWhatsAppMessage(to, "M√º≈üteri temsilcisine baƒülanƒ±lƒ±yor... L√ºtfen bekleyiniz.");
}

// D√ºz metin mesajƒ± g√∂nderme
async function sendWhatsAppMessage(to, message) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    to: to,
    type: "text",
    text: { body: message }
  };

  try {
    const response = await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    console.log("‚úÖ Mesaj g√∂nderildi:", response.data);
  } catch (error) {
    console.error("‚ùå WhatsApp mesaj g√∂nderme hatasƒ±:", error.response ? error.response.data : error.message);
  }
}

// Kargo takip, sipari≈ü durumu gibi bilgileri d√∂nd√ºren sim√ºlasyon fonksiyonu.
// Ger√ßek uygulamada, bu bilgileri API veya veritabanƒ±ndan almanƒ±z gerekecektir.
async function getTrackingInfo(orderNumber) {
  // √ñrnek veriler:
  return {
    trackingCode: "ABC123",
    trackingUrl: "https://tracking.example.com/ABC123",
    delivered: true,            // true ise "teslim edildi"
    carrierName: "XYZ Kargo",
    status: "teslim edildi"      // veya "kargoda", "sipari≈ü olu≈üturuldu", vb.
  };
}

app.listen(port, () => {
  console.log(`üöÄ Sunucu ${port} portunda √ßalƒ±≈üƒ±yor!`);
});
