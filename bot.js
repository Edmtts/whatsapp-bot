const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 10000;

// Ortam deƒüi≈ükenleri ve API URL'leri
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
const IKAS_API_TOKEN_URL = `https://adadunyaoptik.myikas.com/api/admin/oauth/token`;
const IKAS_API_GRAPHQL_URL = 'https://api.myikas.com/api/v1/admin/graphql';
const IKAS_CLIENT_ID = process.env.IKAS_CLIENT_ID;
const IKAS_CLIENT_SECRET = process.env.IKAS_CLIENT_SECRET;

// Body-parser ayarlarƒ±
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Kullanƒ±cƒ± state'lerini tutan obje
const userStates = {};

// Webhook GET: Doƒürulama
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode && token === VERIFY_TOKEN) {
    console.log("‚úÖ Webhook doƒürulandƒ±!");
    res.status(200).send(challenge);
  } else {
    console.error("‚ùå Webhook doƒürulamasƒ± ba≈üarƒ±sƒ±z.");
    res.sendStatus(403);
  }
});

// Webhook POST: Gelen mesajlarƒ±n i≈ülenmesi
app.post('/webhook', async (req, res) => {
  try {
    const entry = req.body.entry && req.body.entry[0];
    const change = entry && entry.changes && entry.changes[0];
    const messageData = change && change.value && change.value.messages && change.value.messages[0];

    if (messageData && messageData.from) {
      const from = messageData.from;
      
      // Her kullanƒ±cƒ± i√ßin state olu≈üturuluyor
      if (!userStates[from]) {
        userStates[from] = { mainMenuShown: false, awaitingOrderNumber: false, currentOrder: null };
      }
      
      // Gelen mesajƒ±n tamamƒ±nƒ± loglayalƒ±m
      console.log("Gelen mesaj verisi:", JSON.stringify(messageData, null, 2));
      
      let buttonTitle = "";
      // Eƒüer buton yanƒ±tƒ± varsa, title deƒüerini alƒ±yoruz.
      if (messageData.button_reply && messageData.button_reply.title) {
        buttonTitle = messageData.button_reply.title.toLowerCase().trim();
      } else if (messageData.text && messageData.text.body) {
        buttonTitle = messageData.text.body.toLowerCase().trim();
      }
      
      console.log(`üì© Alƒ±nan buton title: "${buttonTitle}" (G√∂nderen: ${from})`);

      // Eƒüer sipari≈ü numarasƒ± bekleniyorsa (kullanƒ±cƒ± sipari≈ü numarasƒ± girecek)
      if (userStates[from].awaitingOrderNumber) {
        const orderNumber = buttonTitle; // Kullanƒ±cƒ±nƒ±n girdiƒüi sipari≈ü numarasƒ±
        const order = await getOrderByOrderNumber(orderNumber);
        if (order) {
          sendOrderInteractiveMessage(from, order);
          userStates[from].awaitingOrderNumber = false;
        } else {
          sendWhatsAppMessage(from, "Belirttiƒüiniz sipari≈ü numarasƒ±na ait sipari≈ü bulunamadƒ±. L√ºtfen tekrar deneyiniz.");
        }
        return res.sendStatus(200);
      }

      // Ana men√º hen√ºz g√∂sterilmediyse, ana men√ºy√º g√∂nder.
      if (!userStates[from].mainMenuShown) {
        sendWhatsAppInteractiveMessage(from);
        userStates[from].mainMenuShown = true;
        return res.sendStatus(200);
      }
      
      // Gelen buton title'sine g√∂re y√∂nlendirme yapalƒ±m
      if (buttonTitle === "sipari≈ülerim") {
        const orders = await getOrdersByPhone(from);
        if (typeof orders === 'string' || orders.length === 0) {
          sendWhatsAppMessage(from, "Telefon numaranƒ±za kayƒ±tlƒ± sipari≈ü yok, sipari≈ü numaranƒ±zƒ± girerek kontrol saƒülayabiliriz.");
          userStates[from].awaitingOrderNumber = true;
        } else {
          orders.forEach(order => {
            sendOrderInteractiveMessage(from, order);
          });
        }
      } else if (buttonTitle === "sipari≈üim nerede?") {
        sendWhatsAppMessage(from, "Sipari≈üinizin nerede olduƒüunu g√∂steren detaylƒ± bilgi burada olacak.");
      } else if (buttonTitle === "iade ve iptal") {
        sendWhatsAppMessage(from, "ƒ∞ade ve iptal i≈ülemleriyle ilgili bilgi burada olacak.");
      }
      // Dinamik sipari≈ü detay men√ºs√º (bu men√ºdeki butonlar; √∂rn: kargo takip no, sipari≈ü durumu, iade)
      else if (buttonTitle === "kargo takip no") {
        const orderNumber = userStates[from].currentOrder;
        if (orderNumber) {
          sendTrackingInfoMessage(from, orderNumber);
        } else {
          sendWhatsAppMessage(from, "L√ºtfen √∂nce sipari≈üinizi se√ßiniz.");
        }
      } else if (buttonTitle === "sipari≈ü durumu") {
        const orderNumber = userStates[from].currentOrder;
        if (orderNumber) {
          sendOrderStatusMessage(from, orderNumber);
        } else {
          sendWhatsAppMessage(from, "L√ºtfen √∂nce sipari≈üinizi se√ßiniz.");
        }
      } else if (buttonTitle === "iade") {
        const orderNumber = userStates[from].currentOrder;
        if (orderNumber) {
          sendReturnConfirmationMessage(from, orderNumber);
        } else {
          sendWhatsAppMessage(from, "L√ºtfen √∂nce sipari≈üinizi se√ßiniz.");
        }
      }
      // ƒ∞ade onay men√ºs√º butonlarƒ±
      else if (buttonTitle === "onaylƒ±yorum") {
        const orderNumber = userStates[from].currentOrder;
        if (orderNumber) {
          initiateReturnRequest(from, orderNumber);
        } else {
          sendWhatsAppMessage(from, "Sipari≈ü bilgisi bulunamadƒ±.");
        }
      } else if (buttonTitle === "vazge√ß") {
        sendWhatsAppInteractiveMessage(from);
      } else if (buttonTitle === "ba≈üka bir sorum var") {
        sendCustomerServiceMessage(from);
      }
      // "Bu Sipari≈üi ƒ∞ncele" butonundan gelen id √ºzerinden i≈ülem (√∂rneƒüin: "order_detail_1234")
      else if (buttonTitle.startsWith("bu sipari≈üi incele")) {
        // Eƒüer bu buton se√ßilmi≈üse, state'de saklƒ± sipari≈ü numarasƒ±nƒ± kullanƒ±yoruz.
        const orderNumber = userStates[from].currentOrder;
        if (orderNumber) {
          sendOrderDetailInteractiveMenu(from, orderNumber);
        } else {
          sendWhatsAppMessage(from, "Sipari≈ü bilgisi bulunamadƒ±.");
        }
      } else {
        sendWhatsAppMessage(from, "L√ºtfen men√ºdeki butonlardan birini se√ßiniz.");
      }
    }
    res.sendStatus(200);
  } catch (error) {
    console.error("‚ùå Webhook i≈üleme hatasƒ±:", error);
    res.sendStatus(500);
  }
});

// Ana Men√º: Butonlu mesaj g√∂nderimi (buton title'larƒ± kullanƒ±larak)
async function sendWhatsAppInteractiveMessage(to) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: "Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim?" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "siparislerim", title: "Sipari≈ülerim" } },
          { type: "reply", reply: { id: "siparisim_nerede", title: "Sipari≈üim Nerede?" } },
          { type: "reply", reply: { id: "iade_iptal", title: "ƒ∞ade ve ƒ∞ptal" } }
        ]
      }
    }
  };
  try {
    const response = await axios.post(url, data, {
      headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
    });
    console.log("‚úÖ Ana men√º mesajƒ± g√∂nderildi:", response.data);
  } catch (error) {
    console.error("‚ùå Ana men√º mesajƒ± g√∂nderme hatasƒ±:", error.response ? error.response.data : error.message);
  }
}

// IKAS API √ºzerinden Access Token alma
async function getAccessToken() {
  try {
    const response = await axios.post(
      IKAS_API_TOKEN_URL,
      `grant_type=client_credentials&client_id=${IKAS_CLIENT_ID}&client_secret=${IKAS_CLIENT_SECRET}`,
      { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
    );
    console.log("‚úÖ Access Token alƒ±ndƒ±:", response.data.access_token);
    return response.data.access_token;
  } catch (error) {
    console.error("‚ùå Access Token alma hatasƒ±:", error.response ? error.response.data : error.message);
    return null;
  }
}

// Telefon numarasƒ±na g√∂re sipari≈üleri getiren GraphQL sorgusu
async function getOrdersByPhone(phone) {
  const token = await getAccessToken();
  if (!token) return "‚ö†Ô∏è Sipari≈ü bilgilerinize ula≈üƒ±lamƒ±yor.";
  const normalizedPhone = "+90" + phone.replace(/\D/g, "").slice(-10);
  const query = {
    query: `
    query {
      listOrder {
        data {
          orderNumber
          status
          totalFinalPrice
          currencyCode
          createdAt
          customer {
            phone
          }
        }
      }
    }`
  };
  try {
    const response = await axios.post(IKAS_API_GRAPHQL_URL, query, {
      headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
    });
    const orders = response.data.data.listOrder.data;
    const userOrders = orders.filter(order => order.customer && order.customer.phone === normalizedPhone);
    return userOrders;
  } catch (error) {
    console.error("‚ùå IKAS API hata:", error.response ? error.response.data : error.message);
    return "‚ö†Ô∏è Sipari≈ü bilgilerinize ula≈üƒ±rken hata olu≈ütu.";
  }
}

// Sipari≈ü numarasƒ±na g√∂re sipari≈üi getiren sorgu (tek sipari≈ü)
async function getOrderByOrderNumber(orderNumber) {
  const token = await getAccessToken();
  if (!token) return null;
  const query = {
    query: `
    query ($orderNumber: String!) {
      order(orderNumber: $orderNumber) {
        orderNumber
        status
        totalFinalPrice
        currencyCode
        createdAt
        customer {
          phone
        }
      }
    }`,
    variables: { orderNumber }
  };
  try {
    const response = await axios.post(IKAS_API_GRAPHQL_URL, query, {
      headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
    });
    return response.data.data.order;
  } catch (error) {
    console.error("‚ùå IKAS API (order by orderNumber) hata:", error.response ? error.response.data : error.message);
    return null;
  }
}

// Her sipari≈ü i√ßin interaktif mesaj g√∂nderimi (sipari≈ü detayƒ±)
async function sendOrderInteractiveMessage(to, order) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const orderDate = order.createdAt ? new Date(order.createdAt).toLocaleDateString() : "Bilinmiyor";
  const status = order.status || "Bilinmiyor";
  const productName = "√úr√ºn bilgisi yok"; // IKAS sorgusunda √ºr√ºn bilgisi olmadƒ±ƒüƒ± i√ßin varsayƒ±lan
  const bodyText = `Sipari≈ü No: ${order.orderNumber}\nSipari≈ü Tarihi: ${orderDate}\nDurumu: ${status}\n√úr√ºn: ${productName}\nFiyat: ${order.totalFinalPrice} ${order.currencyCode}`;
  
  // Se√ßilen sipari≈ü numarasƒ±nƒ± state'e kaydediyoruz.
  userStates[to].currentOrder = order.orderNumber;
  
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      header: { type: "image", image: { link: "" } },
      body: { text: bodyText },
      action: {
        buttons: [
          { type: "reply", reply: { id: `order_detail_${order.orderNumber}`, title: "Bu Sipari≈üi ƒ∞ncele" } }
        ]
      }
    }
  };
  try {
    const response = await axios.post(url, data, {
      headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
    });
    console.log(`‚úÖ Sipari≈ü ${order.orderNumber} i√ßin interaktif mesaj g√∂nderildi:`, response.data);
  } catch (error) {
    console.error(`‚ùå Sipari≈ü ${order.orderNumber} i√ßin interaktif mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
  }
}

// Sipari≈ü detay men√ºs√º: "Bu sipari≈üi hakkƒ±nda ne yapmak istiyorsun?"
async function sendOrderDetailInteractiveMenu(to, orderNumber) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: "Bu sipari≈üi hakkƒ±nda ne yapmak istiyorsun?" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "kargo_takip", title: "Kargo takip no" } },
          { type: "reply", reply: { id: "siparis_durumu", title: "Sipari≈ü durumu" } },
          { type: "reply", reply: { id: "iade", title: "ƒ∞ade" } }
        ]
      }
    }
  };
  try {
    const response = await axios.post(url, data, {
      headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
    });
    console.log(`‚úÖ Sipari≈ü ${orderNumber} detay interaktif mesaj g√∂nderildi:`, response.data);
  } catch (error) {
    console.error(`‚ùå Sipari≈ü ${orderNumber} detay interaktif mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
  }
}

// Kargo takip no: ƒ∞lgili sipari≈üin kargo takip bilgisini g√∂sterir.
async function sendTrackingInfoMessage(to, orderNumber) {
  const trackingInfo = await getTrackingInfo(orderNumber);
  const baseMessage = `Sipari≈ü ${orderNumber} nolu takip kodun √ºzerinden takip edebilirsin: ${trackingInfo.trackingCode}`;
  if (trackingInfo.delivered && trackingInfo.trackingUrl) {
    const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
    const data = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to: to,
      type: "interactive",
      interactive: {
        type: "button",
        body: { text: baseMessage },
        action: {
          buttons: [
            { type: "url", url: { title: "Takip Et", url: trackingInfo.trackingUrl } }
          ]
        }
      }
    };
    try {
      const response = await axios.post(url, data, {
        headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
      });
      console.log(`‚úÖ Sipari≈ü ${orderNumber} kargo takip kodu mesajƒ± g√∂nderildi:`, response.data);
    } catch (error) {
      console.error(`‚ùå Sipari≈ü ${orderNumber} kargo takip kodu mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
    }
  } else {
    sendWhatsAppMessage(to, baseMessage);
  }
}

// Sipari≈ü durumu: "kargoda" bilgisi ve takip butonu
async function sendOrderStatusMessage(to, orderNumber) {
  const trackingInfo = await getTrackingInfo(orderNumber);
  const baseMessage = `Sipari≈ü ${orderNumber} nolu √ºr√ºn "kargoda" g√∂r√ºnmektedir.\nKargo firmasƒ±: ${trackingInfo.carrierName}, takip no: ${trackingInfo.trackingCode}`;
  if (trackingInfo.delivered && trackingInfo.trackingUrl) {
    const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
    const data = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to: to,
      type: "interactive",
      interactive: {
        type: "button",
        body: { text: baseMessage },
        action: {
          buttons: [
            { type: "url", url: { title: "Takip Et", url: trackingInfo.trackingUrl } }
          ]
        }
      }
    };
    try {
      const response = await axios.post(url, data, {
        headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
      });
      console.log(`‚úÖ Sipari≈ü ${orderNumber} durum bilgisi mesajƒ± g√∂nderildi:`, response.data);
    } catch (error) {
      console.error(`‚ùå Sipari≈ü ${orderNumber} durum bilgisi mesaj g√∂nderme hatasƒ±:`, error.response ? error.response.data : error.message);
    }
  } else {
    sendWhatsAppMessage(to, baseMessage);
  }
}

// ƒ∞ade: Sipari≈ü "teslim edildi" ise onay mesajƒ± g√∂nder, aksi halde uyarƒ± g√∂ster.
async function sendReturnConfirmationMessage(to, orderNumber) {
  const orderDetails = await getTrackingInfo(orderNumber);
  if (orderDetails.status !== "teslim edildi") {
    sendWhatsAppMessage(to, `Not: Sipari≈ü ${orderNumber} nolu √ºr√ºn "${orderDetails.status}" a≈üamasƒ±nda olduƒüu i√ßin iade ba≈ülatƒ±lamaz. Teslim edildikten 14 g√ºn i√ßerisinde iade talebinde bulunabilirsiniz.`);
    return;
  }
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    recipient_type: "individual",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: `Sipari≈ü ${orderNumber} nolu √ºr√ºn i√ßin iade talebi olu≈üturduƒüunu onaylƒ±yor musun?` },
      action: {
        buttons: [
          { type: "reply", reply: { id: "onaylƒ±yorum", title: "Onaylƒ±yorum" } },
          { type: "reply", reply: { id: "vazge√ß", title: "Vazge√ß" } },
          { type: "reply", reply: { id: "baska bir sorum var", title: "Ba≈üka bir sorum var" } }
        ]
      }
    }
  };
  try {
    const response = await axios.post(url, data, {
      headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
    });
    console.log(`‚úÖ ƒ∞ade onay mesajƒ± g√∂nderildi for order ${orderNumber}:`, response.data);
  } catch (error) {
    console.error(`‚ùå ƒ∞ade onay mesajƒ± g√∂nderme hatasƒ± for order ${orderNumber}:`, error.response ? error.response.data : error.message);
  }
}

// ƒ∞ade Onay: API √ßaƒürƒ±sƒ± sim√ºlasyonu
async function initiateReturnRequest(to, orderNumber) {
  console.log(`API √ºzerinden iade talebi ba≈ülatƒ±lƒ±yor: Order ${orderNumber}`);
  sendWhatsAppMessage(to, `Sipari≈ü ${orderNumber} nolu √ºr√ºn i√ßin iade talebiniz olu≈üturulmu≈ütur.`);
}

// M√º≈üteri temsilcisine baƒülanma mesajƒ±
function sendCustomerServiceMessage(to) {
  sendWhatsAppMessage(to, "M√º≈üteri temsilcisine baƒülanƒ±lƒ±yor... L√ºtfen bekleyiniz.");
}

// D√ºz metin mesajƒ± g√∂nderme
async function sendWhatsAppMessage(to, message) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    to: to,
    type: "text",
    text: { body: message }
  };
  try {
    const response = await axios.post(url, data, {
      headers: { Authorization: `Bearer ${ACCESS_TOKEN}`, "Content-Type": "application/json" }
    });
    console.log("‚úÖ Mesaj g√∂nderildi:", response.data);
  } catch (error) {
    console.error("‚ùå WhatsApp mesaj g√∂nderme hatasƒ±:", error.response ? error.response.data : error.message);
  }
}

// Sim√ºlasyon fonksiyonu: Kargo takip bilgilerini d√∂nd√ºr√ºyor
async function getTrackingInfo(orderNumber) {
  return {
    trackingCode: "ABC123",
    trackingUrl: "https://tracking.example.com/ABC123",
    delivered: true,
    carrierName: "XYZ Kargo",
    status: "teslim edildi" // veya "kargoda", "sipari≈ü olu≈üturuldu", vb.
  };
}

app.listen(port, () => {
  console.log(`üöÄ Sunucu ${port} portunda √ßalƒ±≈üƒ±yor!`);
});
