const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
require('dotenv').config();

const app = express();
app.use(bodyParser.json());

// .env dosyasƒ±ndan ayarlar
const PORT = process.env.PORT || 10000;
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
const IKAS_TOKEN_URL = 'https://adadunyaoptik.myikas.com/api/admin/oauth/token';
const IKAS_GRAPHQL_URL = 'https://api.myikas.com/api/v1/admin/graphql';
const IKAS_CLIENT_ID = process.env.IKAS_CLIENT_ID;
const IKAS_CLIENT_SECRET = process.env.IKAS_CLIENT_SECRET;

// Kullanƒ±cƒ± durumlarƒ±nƒ± tutan obje
const userStates = {};

// 1. Webhook Doƒürulama
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode === 'subscribe' && token === VERIFY_TOKEN) {
    console.log("‚úÖ Webhook doƒürulandƒ±");
    return res.status(200).send(challenge);
  } else {
    return res.sendStatus(403);
  }
});

// 2. Webhook POST: Gelen mesajlarƒ±n i≈ülenmesi
app.post('/webhook', async (req, res) => {
  // Mesaj yapƒ±sƒ±nƒ± g√ºvenli ≈üekilde alƒ±yoruz.
  const message = req.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
  if (!message) {
    return res.sendStatus(200);
  }

  const from = message.from;
  // Buton tƒ±klamasƒ± varsa button_reply; yoksa text body'den alƒ±yoruz.
  const msgText = message.button_reply?.id?.toLowerCase().trim() ||
                  message.text?.body?.toLowerCase().trim() || "";

  console.log(`Received message from ${from}: ${msgText}`);

  // Eƒüer kullanƒ±cƒ± bir sipari≈ü numarasƒ± girmesi gerekiyorsa
  if (userStates[from]?.awaitingOrderNumber) {
    const order = await getOrderByNumber(msgText);
    if (order) {
      const orderDetail = formatOrderDetail(order);
      await sendMessage(from, orderDetail);
    } else {
      // Sipari≈ü bulunamadƒ±, m√º≈üteri temsilcisine baƒülan butonlu mesaj g√∂nder
      await sendMessage(from, "Girdiƒüin sipari≈ü numarasƒ±na ait sipari≈ü bulunamadƒ±. Dilersen m√º≈üteri temsilcisine baƒülanabilirsin.");
      await sendCustomerServiceButton(from);
    }
    userStates[from].awaitingOrderNumber = false;
    return res.sendStatus(200);
  }

  // Eƒüer sipari≈ü detay butonuna basƒ±lmƒ±≈üsa (id: order_detail_{orderNumber})
  if (msgText.startsWith("order_detail_")) {
    const orderNumber = msgText.replace("order_detail_", "");
    const order = await getOrderByNumber(orderNumber);
    if (order) {
      const orderDetail = formatOrderDetail(order);
      await sendMessage(from, orderDetail);
    } else {
      await sendMessage(from, "Sipari≈ü detaylarƒ± bulunamadƒ±.");
    }
    return res.sendStatus(200);
  }

  // Ana Men√º se√ßenekleri
  if (msgText === "siparislerim") {
    // Kullanƒ±cƒ±nƒ±n telefonuna kayƒ±tlƒ± sipari≈üleri getir
    const orders = await getOrdersByPhone(from);
    if (!orders || orders.length === 0) {
      await sendMessage(from, "üì≠ Telefon numaranƒ±za kayƒ±tlƒ± sipari≈üler bulunamadƒ±, dilersen sipari≈ü numaranƒ±zƒ± yazarak i≈ülem saƒülayabilirsiniz.");
      userStates[from] = { awaitingOrderNumber: true };
    } else {
      // Her sipari≈ü i√ßin detaylarƒ± ve 'Bu Sipari≈üi ƒ∞ncele' butonunu g√∂nder
      for (const order of orders) {
        const orderInfo = formatOrderSummary(order);
        await sendOrderInteractiveMessage(from, order, orderInfo);
      }
    }
    return res.sendStatus(200);
  }

  // Diƒüer buton se√ßenekleri i√ßin (√∂rneƒüin "siparisim nerede", "iade ve iptal") ≈üimdilik ana men√º g√∂steriliyor.
  await sendMainMenu(from);
  return res.sendStatus(200);
});

// Ana men√ºy√º g√∂nder: Herhangi bir metin yazƒ±ldƒ±ƒüƒ±nda veya bilinmeyen durumda
async function sendMainMenu(to) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: "Merhaba, size nasƒ±l yardƒ±mcƒ± olabilirim?" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "siparislerim", title: "Sipari≈ülerim" } },
          { type: "reply", reply: { id: "siparisim_nerede", title: "Sipari≈üim Nerede" } },
          { type: "reply", reply: { id: "iade_iptal", title: "ƒ∞ade ve ƒ∞ptal" } }
        ]
      }
    }
  };

  try {
    await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("Ana men√º g√∂nderme hatasƒ±:", error.response?.data || error.message);
  }
}

// D√ºz metin mesaj g√∂nderme fonksiyonu
async function sendMessage(to, message) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    to: to,
    type: "text",
    text: { body: message }
  };

  try {
    await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("Mesaj g√∂nderme hatasƒ±:", error.response?.data || error.message);
  }
}

// Sipari≈ü detay butonlu interaktif mesaj g√∂nderme
async function sendOrderInteractiveMessage(to, order, orderInfo) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: orderInfo },
      action: {
        buttons: [
          { type: "reply", reply: { id: `order_detail_${order.orderNumber}`, title: "Bu Sipari≈üi ƒ∞ncele" } }
        ]
      }
    }
  };

  try {
    await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("Sipari≈ü detay butonlu mesaj g√∂nderme hatasƒ±:", error.response?.data || error.message);
  }
}

// M√º≈üteri temsilcisine baƒülan butonlu mesaj g√∂nderme
async function sendCustomerServiceButton(to) {
  const url = `https://graph.facebook.com/v17.0/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: "whatsapp",
    to: to,
    type: "interactive",
    interactive: {
      type: "button",
      body: { text: "M√º≈üteri temsilcisine baƒülanmak ister misiniz?" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "musteri_temsilci", title: "M√º≈üteri Temsilcisine Baƒülan" } }
        ]
      }
    }
  };

  try {
    await axios.post(url, data, {
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("M√º≈üteri temsilcisi mesajƒ± g√∂nderme hatasƒ±:", error.response?.data || error.message);
  }
}

// Sipari≈ü detaylarƒ±nƒ± getir (tek sipari≈ü sorgulama)
async function getOrderByNumber(orderNumber) {
  const token = await getAccessToken();
  if (!token) return null;

  const query = {
    query: `
      query ($orderNumber: String!) {
        order(orderNumber: $orderNumber) {
          orderNumber
          createdAt
          totalFinalPrice
          currencyCode
          status
          customer { phone }
          orderLineItems {
            product {
              name
            }
            quantity
            unitPrice
          }
        }
      }
    `,
    variables: { orderNumber }
  };

  try {
    const response = await axios.post(IKAS_GRAPHQL_URL, query, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return response.data.data.order;
  } catch (error) {
    console.error("Tek sipari≈ü sorgulama hatasƒ±:", error.response?.data || error.message);
    return null;
  }
}

// Telefona g√∂re sipari≈üleri getir (liste sorgulama)
async function getOrdersByPhone(phone) {
  const token = await getAccessToken();
  if (!token) return [];

  const normalizedPhone = "+90" + phone.replace(/\D/g, "").slice(-10);
  const query = {
    query: `
      query {
        listOrder {
          data {
            orderNumber
            createdAt
            totalFinalPrice
            currencyCode
            status
            customer { phone }
            orderLineItems {
              product {
                name
              }
              quantity
              unitPrice
            }
          }
        }
      }
    `
  };

  try {
    const response = await axios.post(IKAS_GRAPHQL_URL, query, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const allOrders = response.data.data.listOrder.data;
    const filtered = allOrders.filter(o => o.customer?.phone === normalizedPhone);
    // Her sipari≈ü i√ßin √ºr√ºn bilgilerini birle≈ütiriyoruz.
    return filtered.map(order => ({
      ...order,
      productName: order.orderLineItems.map(item => `${item.quantity}x ${item.product.name}`).join(", ")
    }));
  } catch (error) {
    console.error("Sipari≈ü √ßekme hatasƒ±:", error.response?.data || error.message);
    return [];
  }
}

// IKAS API'den access token alma fonksiyonu
async function getAccessToken() {
  try {
    const response = await axios.post(
      IKAS_TOKEN_URL,
      `grant_type=client_credentials&client_id=${IKAS_CLIENT_ID}&client_secret=${IKAS_CLIENT_SECRET}`,
      { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
    );
    return response.data.access_token;
  } catch (error) {
    console.error("Token alma hatasƒ±:", error.response?.data || error.message);
    return null;
  }
}

// Sipari≈ü √∂zet formatƒ±nƒ± olu≈üturma (liste halinde g√∂nderilecek mesaj)
function formatOrderSummary(order) {
  return `Sipari≈ü no: ${order.orderNumber}\nSipari≈ü Tarihi: ${order.createdAt}\n√úr√ºn: ${order.productName}\nFiyat: ${order.totalFinalPrice} ${order.currencyCode}\nDurum: ${order.status}`;
}

// Sipari≈ü detay formatƒ±nƒ± olu≈üturma (tek sipari≈ü sorgulama i√ßin)
function formatOrderDetail(order) {
  return `Sipari≈ü no: ${order.orderNumber}\nSipari≈ü Tarihi: ${order.createdAt}\n√úr√ºn: ${order.orderLineItems.map(item => `${item.quantity}x ${item.product.name}`).join(", ")}\nFiyat: ${order.totalFinalPrice} ${order.currencyCode}\nDurum: ${order.status}`;
}

// Sunucuyu ba≈ülat
app.listen(PORT, () => {
  console.log(`üöÄ WhatsApp bot ${PORT} portunda √ßalƒ±≈üƒ±yor.`);
});
